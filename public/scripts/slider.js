// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Slider = (function() {
    function Slider(ref) {
      this.ref = ref;
      this.onResize = __bind(this.onResize, this);
      this.onImageLoaded = __bind(this.onImageLoaded, this);
      this.loadNewImages = __bind(this.loadNewImages, this);
      this.checkIfImageIsOk = __bind(this.checkIfImageIsOk, this);
      this.onThumbClick = __bind(this.onThumbClick, this);
      this.resizeProgressBar = __bind(this.resizeProgressBar, this);
      this.getProgressBarStep = __bind(this.getProgressBarStep, this);
      this.initSlides = __bind(this.initSlides, this);
      this.initThumbsControl = __bind(this.initThumbsControl, this);
      this.initComplexSlider = __bind(this.initComplexSlider, this);
      this.checkActive = __bind(this.checkActive, this);
      this.initSimpleSlider = __bind(this.initSimpleSlider, this);
      this.w = $(window);
      this.slider = this.ref.find('.slider');
      this.slide = this.slider.find('.slide');
      this.action_bar_ref = this.ref.find('.wrap-controller');
      this.wrapInfo = this.ref.find('.wrapInfo');
      event_emitter.addListener('THUMB_CLICK', this.onThumbClick);
      this.view = "landscape";
      this.currentId = 1;
      if (this.action_bar_ref.length > 0) {
        this.type = "complex";
        this.initComplexSlider();
      }
      if (this.wrapInfo.length > 0) {
        this.type = "simple";
        this.initSimpleSlider();
      }
      this.initSlides();
      event_emitter.emitEvent('THUMB_CLICK', ['01']);
      this.onResize();
    }

    Slider.prototype.initSimpleSlider = function() {
      var ball, i, _i, _ref, _results,
        _this = this;
      this.paginator = this.wrapInfo.find('.sliderPaginator li >a');
      _results = [];
      for (i = _i = 0, _ref = this.paginator.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        ball = $(this.paginator[i]);
        ball.click(function(e) {
          var bl, id;
          e.preventDefault();
          bl = $(e.currentTarget);
          _this.checkActive(bl);
          id = bl.parent().attr('data-id');
          return event_emitter.emitEvent('THUMB_CLICK', [id]);
        });
        _results.push(this.checkActive($(this.paginator[0])));
      }
      return _results;
    };

    Slider.prototype.checkActive = function(bl) {
      var ball, i, _i, _ref;
      for (i = _i = 0, _ref = this.paginator.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        ball = $(this.paginator[i]);
        if (ball !== bl && ball.hasClass('active')) {
          ball.removeClass('active');
        }
      }
      return bl.addClass('active');
    };

    Slider.prototype.initComplexSlider = function() {
      this.progress_bar_ref = this.action_bar_ref.find('.progress-bar');
      this.thumbs_ref = this.ref.find('.wrap-thumbs');
      this.thumblist = this.thumbs_ref.find('.thumb-list');
      this.thumblist.css('left', 0);
      this.data_array = this.thumbs_ref.find('.thumb-list .thumb');
      this.progress_bar_current_ref = this.progress_bar_ref.find('.current');
      this.slidermenu = new SliderMouseFollower(this.thumbs_ref);
      this.thumbsHide = this.ref.find('.thumbsHide');
      this.thumbsShow = this.ref.find('.thumbsShow');
      this.initThumbsControl();
      return this.setProgressBar();
    };

    Slider.prototype.initThumbsControl = function() {
      var _this = this;
      this.thumbsShow.hide();
      this.thumbsShow.click(function(e) {
        var btn;
        btn = $(e.currentTarget);
        e.preventDefault();
        btn.hide();
        _this.thumbsHide.show();
        return TweenLite.to(_this.action_bar_ref, .5, {
          css: {
            'top': 0
          },
          ease: Power3.easeOut
        });
      });
      return this.thumbsHide.click(function(e) {
        var btn;
        btn = $(e.currentTarget);
        e.preventDefault();
        btn.hide();
        _this.thumbsShow.show();
        return TweenLite.to(_this.action_bar_ref, .3, {
          css: {
            'top': 85
          },
          ease: Power4.easeIn
        });
      });
    };

    Slider.prototype.initSlides = function() {
      var i, img, slide, src, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.slide.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        slide = $(this.slide[i]);
        img = slide.find('img');
        src = img.attr('src');
        slide.attr('data-landscape', src);
        _results.push(TweenLite.to(slide, .1, {
          css: {
            'opacity': 0
          },
          ease: Power4.easeInOut
        }));
      }
      return _results;
    };

    Slider.prototype.setProgressBar = function() {
      this.updateProgressBar(0);
      return this.resizeProgressBar;
    };

    Slider.prototype.updateProgressBar = function(index) {
      var w;
      this.progress_bar_current_ref.attr('data-index', index);
      w = index * this.getProgressBarStep();
      return TweenLite.to(this.progress_bar_current_ref, 1, {
        css: {
          'width': "" + w + "px"
        },
        ease: Power4.easeInOut
      });
    };

    Slider.prototype.getProgressBarStep = function() {
      var progress_bar_step;
      return progress_bar_step = this.thumbs_ref.width() / this.data_array.length;
    };

    Slider.prototype.resizeProgressBar = function() {
      var w;
      w = (this.progress_bar_current_ref.attr('data-index')) * this.getProgressBarStep();
      return this.progress_bar_current_ref.css({
        width: "" + w + "px"
      });
    };

    Slider.prototype.onThumbClick = function(id) {
      var currentSlide, i, nextSlide, slide, _currentId, _i, _id, _index, _ref;
      if (this.type === "complex") {
        this.updateProgressBar(id);
      }
      for (i = _i = 0, _ref = this.slide.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        slide = $(this.slide[i]);
        _index = parseInt(slide.attr('data-id'));
        _id = parseInt(id);
        _currentId = parseInt(this.currentId);
        if (_index === _id) {
          nextSlide = slide;
        }
        if (_index === _currentId) {
          currentSlide = slide;
        }
      }
      TweenLite.to(currentSlide, .8, {
        css: {
          'opacity': 0
        },
        ease: Power4.easeInOut
      });
      TweenLite.to(nextSlide, 1, {
        css: {
          'opacity': 1
        },
        ease: Power4.easeInOut
      });
      return this.currentId = id;
    };

    Slider.prototype.checkIfImageIsOk = function() {
      if (this.view === "portrait") {
        if (this.area_w > this.area_h) {
          this.view = "landscape";
          return this.loadNewImages();
        }
      } else {
        if (this.area_w < this.area_h) {
          this.view = "portrait";
          return this.loadNewImages();
        }
      }
    };

    Slider.prototype.loadNewImages = function() {
      var background, i, img, preloader, src, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.slide.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        background = $(this.slide[i]);
        img = background.find('img');
        if (this.view === "portrait") {
          src = background.attr('data-portrait');
        } else {
          src = background.attr('data-landscape');
        }
        img.attr('src', src);
        preloader = new Image();
        preloader.ref = img;
        preloader.onload = this.onImageLoaded;
        _results.push(preloader.src = src);
      }
      return _results;
    };

    Slider.prototype.onImageLoaded = function() {
      return this.onResize();
    };

    Slider.prototype.onResize = function() {
      var background, h, i, img, left, ratio, top, w, _i, _ref, _results;
      if (this.type === "complex") {
        this.resizeProgressBar();
      }
      this.area_w = this.slider.width();
      this.area_h = this.slider.height();
      this.checkIfImageIsOk();
      _results = [];
      for (i = _i = 0, _ref = this.slide.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        background = $(this.slide[i]);
        img = background.find('img');
        ratio = parseFloat(img.width() / img.height());
        if (!isNaN(ratio)) {
          h = this.area_w / ratio;
          if (h > this.area_h) {
            w = this.area_w;
            top = .5 * (this.area_h - h);
            left = 0;
          } else {
            w = this.area_h * ratio;
            h = this.area_h;
            top = 0;
            left = .5 * (this.area_w - w);
          }
          _results.push(background.css({
            width: "" + w + "px",
            height: "" + h + "px",
            top: "" + top + "px",
            left: "" + left + "px"
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Slider;

  })();

}).call(this);
